I"≥!<style>
  img.plot { max-height: 400px !important; }
</style>

<p>My job nowadays involves a lot of music and JavaScript. You know what musicians really
care about? Paychecks (support your local musicians, go to concerts, don‚Äôt steal music
from indie musicians). But also: keeping time.</p>

<p>Keeping time in JavaScript is kind of a joke, not just because time is a
social construct (this is the Jenn Schiffer social engineering at work), but because it‚Äôs really easy to write
code that blocks the timekeeper. Remember: JavaScript
inherently only has one thread, which it uses for everything: painting your buttons,
looping through arrays, mining bitcoin, scrolling. Everything.
This means that most of the time, you
write blocking code, but it only blocks for a little bit ‚Äì 1ms here and there. And that‚Äôs ok!
Visually you don‚Äôt notice that kind of latency, and let‚Äôs be honest: it takes like 400ms to download the scripts, what‚Äôs 1ms?</p>

<p>1ms starts getting in the way when it‚Äôs actually 5ms, or 40 ms, or when you‚Äôre
trying to have a metronome run correctly. I made a <a href="https://input-delay.glitch.me">typing delay experiment</a> to see how much delay people could tolerate, and just
for typing alone some people got really antsy around 200ms (shout out
to the section of the population who thought they were heroes because they could
tolerate infinity delay because of how bad ssh latency is. That‚Äôs not heroic,
that‚Äôs Stockholm syndrome. Complain to your sys admins).</p>

<p>When I changed that to an <a href="https://audio-delay.glitch.me">audio delay experiment</a>,
musicians started complaining around 40ms. And that was just audio delay, not
an actual metronome. Imagine that fucking with your audio too! So, keeping time is really important ‚Äì but how do we actually do that in JavaScript?</p>

<p>In general, when we want to not block in JavaScript (and do better than
<code class="language-plaintext highlighter-rouge">setInterval</code>, who is the friend you invite to a party but
shows up like +/- 4h to it), we do one of two things:
start writing <code class="language-plaintext highlighter-rouge">async</code> functions, or move code to a <code class="language-plaintext highlighter-rouge">Worker</code> (<a href="https://twitter.com/dassurma">Surma</a>
has a great <a href="https://dassur.ma/things/when-workers/">article</a> about workers everyone
should read). In
particular, for audio things, there‚Äôs a third option: using the Web Audio clock ‚Äì Chris Wilson has a <a href="https://www.html5rocks.com/en/tutorials/audio/scheduling/">great blog post</a>
about how to do your own audio scheduling which is an oldie but a goodie! (turns out
not much changes in 4 years in the Web Audio spec world). Anyway, I wanted to
compare these three approaches, and see how bad the latency was.</p>

<h2 id="play-with-the-experiment">Play with the experiment</h2>
<p>Me being me, I <a href="https://metronomes.glitch.me/">made a whole demo</a> to
test and compare these approaches. I built
3 kinds of metronomes:</p>

<ul>
  <li>a really bad one using <code class="language-plaintext highlighter-rouge">setInterval</code> on the main thread,</li>
  <li>a less bad one using <code class="language-plaintext highlighter-rouge">setInterval</code> in a Worker,</li>
  <li>the best one, that uses the Web Audio API to preschedule audio events, at
the times you want (labelled ‚Äúprescheduled‚Äù in the graphs). The audio events
will happen precisely at the time they are scheduled, but if you want a
callback to do some visual work on, that callback needs to be in a <code class="language-plaintext highlighter-rouge">setTimeout</code>,
and will happen when it happens. This is why there are two lines for this metronome.</li>
</ul>

<p>You can run them on your own in that Glitch, but if you only want
the results, here they are.</p>

<h2 id="results">Results</h2>

<h3 id="setup">Setup</h3>
<p>There are 3 metronomes, that each tick 20 times, and after each tick, a callback
function is called. For the first 2 metronomes, in this callback you <em>also</em>
make the audio tick (except for the Web Audio scheduler metronome, which makes the audio
tick on its own time). The graphs below log the difference between the <code class="language-plaintext highlighter-rouge">audioContext.currentTime</code>
of successive ticks.</p>

<h3 id="-the-unrealistic-case">ü§î The unrealistic case</h3>
<p>This is when you‚Äôre literally doing 0 work in between the clock ticks. This is
probably never going to happen in a real app unless it‚Äôs ‚Ä¶ just
an actual metronome i guess. In this case, the difference between successive ticks looks
ok for all metronomes ‚Äì I mean, why wouldn‚Äôt it be? You‚Äôre not scrolling, you‚Äôre
not doing any work, what‚Äôs there to block the ticks? There‚Äôs still a bit of variance between
each ticks, but that‚Äôs because we know we can‚Äôt schedule anything (except for the Web Audio
clock) to be <em>exactly</em> 0.5s away.</p>

<p><img class="plot" alt="" src="/images/metronomes/1.png" /></p>

<h3 id="-the-awful-case">ü§¢ The awful case</h3>
<p>Here we are doing 0.5 seconds of fake work on the main thread, after each tick. This
is where things get really dodgy. Because that fake work is blocking, that means that <em>all</em>
the metronome callbacks are kind of screwed, and their ticks are delayed by at least 0.5s.
In the second metronome, even though we‚Äôre calling <code class="language-plaintext highlighter-rouge">setInterval()</code> in a Worker, it makes no difference because the work from the previous tick is blocking, so it automatically delays the next tick.
In the Web Audio case, we can hear the ticks correctly (the green line), but the callback (which you would use to display things to the screen), is delayed for the same reason
as the other metronomes. Friends don‚Äôt let friends do work on the main thread.</p>

<p><img class="plot" alt="" src="/images/metronomes/2.png" /></p>

<h3 id="-the-better-but-still-not-great-case">üò∞ The better, but still not great case</h3>
<p>When we have a big chunk of blocking work, a good approach is to chunk it up in
smaller work. There are several ways to do this. I split each 0.5s of work into smaller
5ms chunks, and then do each of them in a <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code>. This is ok,
but a bit wasteful (it makes your work take longer than necessary). A better
approach is to use tasks (see this <a href="https://github.com/GoogleChromeLabs/proxx/blob/b1fa3b4c7a8565ddc245b03680dadd567c3a8f9e/src/utils/scheduling.ts#L20-L34">sample code</a> from the proxx game),
but the results weren‚Äôt going to be that different in this case, so I didn‚Äôt bother.
Anyway, this experiment looks better!
Now our ticks are only delayed by about 5ms, which might be ok for your use case. The bad main
thread <code class="language-plaintext highlighter-rouge">setInterval</code> metronome is still doing poorly because there‚Äôs still
work on the main thread and it keeps time on the main thread, so time is still
wibbly wobbly in this case.
<img class="plot" alt="" src="/images/metronomes/3.png" /></p>

<h3 id="-the-optimal-case">ü§© The optimal case</h3>
<p>All workers all the time! If you can, do all this expensive work in a Worker!
If we move the work we have to do in the callback completely off the main thread,
then this setup basically looks the same as the unrealistic ‚Äúthere‚Äôs no work being done ever‚Äù
case ‚Äì the key distinction is that it‚Äôs really ‚Äúthere‚Äôs no work being done <em>on the main thread</em> ever. Hurray!</p>

<p><img class="plot" alt="" src="/images/metronomes/4.png" /></p>

<h2 id="what-have-i-learned-from-this">What have I learned from this</h2>

<ul>
  <li>time is hard</li>
  <li>I knew <code class="language-plaintext highlighter-rouge">setInterval()</code> is bad for time keeping, but now I know it‚Äôs like ‚Ä¶ really bad</li>
  <li>if you need audio scheduling, use the Web Audio clock</li>
  <li>if you need accurate scheduling without the Web Audio clock, use <code class="language-plaintext highlighter-rouge">setInterval</code>
in a Worker</li>
  <li>and if you can, move any expensive work that you have to do from the main thread
to a Worker.</li>
</ul>

<p>Hope this helps at least one of you!</p>

<hr />

<p>Thanks to <a href="https://twitter.com/dassurma">Surma</a> for proof reading this and letting
me steal his horrific ‚Äúblock for a fixed time‚Äù sample code (it‚Äôs <a href="https://glitch.com/edit/#!/metronomes?path=script.js:151:1">this</a>. I know you want to look).</p>
:ET