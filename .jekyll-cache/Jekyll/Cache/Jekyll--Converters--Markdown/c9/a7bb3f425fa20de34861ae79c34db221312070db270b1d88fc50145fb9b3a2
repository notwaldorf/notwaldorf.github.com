I"|<p>The <code class="language-plaintext highlighter-rouge">keypress</code> event works maddeningly differently in Chrome/Safari and Firefox, and this is the story of how I spent two hours discovering that, so that hopefully you donâ€™t have to.</p>

<h2 id="keypress-what">Keypress what?</h2>
<p>A <code class="language-plaintext highlighter-rouge">keypress</code> event is one of the events you get when you mash on the keyboard. Itâ€™s special because according to the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/keypress">spec</a>, you should only get a <code class="language-plaintext highlighter-rouge">keypress</code> event for keystrokes that produce printable characters. So youâ€™ll get it for things like letters and symbols, but not for <code class="language-plaintext highlighter-rouge">backspace</code> and <code class="language-plaintext highlighter-rouge">left arrow</code>.</p>

<p>Itâ€™s a great event to have if you want to write some as-you-type validation on an input, and you want to be able to dismiss the non-printable characters (which will still generate key events, but are uninteresting to the validation bit).</p>

<p>Chrome, Safari and IE10 agree with this interpretation, which is great news.</p>

<p>To be contrarian, Firefox (38; I donâ€™t know about Aurora) <em>always</em> sends a <code class="language-plaintext highlighter-rouge">keypress</code> event for anything you type. Itâ€™s basically a <code class="language-plaintext highlighter-rouge">keydown</code> event from what I see. Now you have to get rid of control characters yourself and you get write code that doesnâ€™t make sense on the other platforms! Yay! (not yay)</p>

<p>I call shenanigans.</p>

<h2 id="mind-your-keycodes-and-charcodes">Mind your keyCodes and charCodes</h2>
<p>From looking at the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/keypress">spec</a>, we expect a <code class="language-plaintext highlighter-rouge">keypress</code> event to have:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">keyCode</code>, a number code that represents the key youâ€™ve pressed. For example, <code class="language-plaintext highlighter-rouge">q</code> is <code class="language-plaintext highlighter-rouge">113</code>. This is allegedly deprecated, but donâ€™t worry, both Firefox and Chrome implement it, but differently.</li>
  <li><code class="language-plaintext highlighter-rouge">charCode</code>, the unicode number of the key. This code only exists for <code class="language-plaintext highlighter-rouge">keypress</code>. Like before, itâ€™s deprecated, but like before, itâ€™s implemented by both browsers. Differently.</li>
  <li><code class="language-plaintext highlighter-rouge">key</code>, the value of the key represented by the event. According to that spec, this one is unimplemented. Worry not, Firefox implements it just fine (Chrome doesnâ€™t). It is the hero we deserve, but not the one we get right now.</li>
</ul>

<h2>ðŸ˜­</h2>
<p>What you get out of this is spectacularly annoying. I wrote some <a href="http://output.jsbin.com/tuboguyido/1/">code</a> that basically prints out what the <code class="language-plaintext highlighter-rouge">keypress</code> event looks like, and found:</p>

<ul>
  <li>As promised, in Chrome/Safari/IE10, we only get the <code class="language-plaintext highlighter-rouge">keypress</code> event for printable things. The event always has the same values for <code class="language-plaintext highlighter-rouge">keyCode</code> and <code class="language-plaintext highlighter-rouge">charCode</code>, and doesnâ€™t have a <code class="language-plaintext highlighter-rouge">key</code>.</li>
</ul>

<p><img src="/images/keypress/chrome.gif" alt="Chrome keypress events" /></p>

<ul>
  <li>In Firefox, you get the <code class="language-plaintext highlighter-rouge">keypress</code> event for ALL the things, BUT:
    <ul>
      <li>for printable characters, <code class="language-plaintext highlighter-rouge">keyCode = 0</code>, and <code class="language-plaintext highlighter-rouge">charCode</code> has a sane value.</li>
      <li>for control characters, <code class="language-plaintext highlighter-rouge">charCode = 0</code>, and <code class="language-plaintext highlighter-rouge">keyCode</code> has a sane value.</li>
      <li>this is super because if youâ€™ve been testing on the other browsers and have been using <code class="language-plaintext highlighter-rouge">String.fromCharCode()</code>, youâ€™re going to get hilariously bad results if you use the wrong code. Like how <code class="language-plaintext highlighter-rouge">arrow left</code> could actually be <code class="language-plaintext highlighter-rouge">%</code>.</li>
      <li>see how <code class="language-plaintext highlighter-rouge">key</code> is kind of nice though? One day, at a browser near you.</li>
    </ul>
  </li>
</ul>

<p><img src="/images/keypress/firefox.gif" alt="Chrome keypress events" /></p>

<p>There, now you know. And knowing is half the battle.</p>

<h2 id="ps">P.S.</h2>
<p>If you read this in the future and the future doesnâ€™t work like I said it does, either I was wrong (highly likely), or someone fixed something. Let me know and I can make updates.</p>
:ET