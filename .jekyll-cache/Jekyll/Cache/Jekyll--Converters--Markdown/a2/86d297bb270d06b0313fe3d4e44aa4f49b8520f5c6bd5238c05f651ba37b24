I"R+<p>Disclaimer: these aren’t new protipz. I didn’t make them up. They’re actually straight out of the Chromium code <a href="http://www.chromium.org/developers/coding-style">style</a>, they’re pretty trivial, and you might already use them. But just in case you’re not a Chromium committer (the outrage), or are fairly new at C++ and want to make your code less suck, here they are. I think they’re neat.</p>

<h2 id="copy-constructors-and-their-brethren">Copy constructors and their brethren</h2>
<p>You know that scene from The Fly when Jeff Goldblum, having not screwed up teleporting a small baboon, decides he
should totally teleport himself? But then he screws that up (because software), manages to turn himself into a giant terrifying fly (because David Cronenberg), and continues to give me nightmares as an adult.</p>

<p>That’s exactly how I feel about copy constructors. You can absolutely get them right, but they’re a <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Copy_Constructors#Copy_Constructors">pain</a>, and among other crimes they’re committing, they’re sometimes deceivingly slow. The point is, most of the time you don’t even need them. I mean, Jeff Goldblum teleported himself like three meters away. Couldn’t he have just walked?</p>

<p>What we tend to do instead is convince the compiler to get annoyed with us if we try to use a copy constructor. This is easy because the compiler &lt;3s being annoyed with us. So we can <a href="https://code.google.com/p/chromium/codesearch#chromium/src/base/macros.h&amp;l=28">define</a> a nice macro (stay with me) that adds a private declaration, but doesn’t implement it:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
</span><span class="n">TypeName</span><span class="p">(</span><span class="n">const</span> <span class="n">TypeName</span><span class="o">&amp;</span><span class="p">);</span>   \
<span class="n">void</span> <span class="n">operator</span><span class="o">=</span><span class="p">(</span><span class="n">const</span> <span class="n">TypeName</span><span class="o">&amp;</span><span class="p">)</span></code></pre></figure>

<p>Which you would then use in your private section of your class, like so:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">Hooman</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="n">Hooman</span><span class="p">();</span>
  <span class="o">~</span><span class="n">Hooman</span><span class="p">();</span>
 <span class="nl">private:</span>
  <span class="n">DISALLOW_COPY_AND_ASSIGN</span><span class="p">(</span><span class="n">Hooman</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>Now, when you try to be ambitious and clone Jeff Goldblum,</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">Hooman</span> <span class="n">jeffGoldblum</span><span class="p">;</span>
<span class="n">Hooman</span> <span class="nf">teleportedJeffGoldblum</span><span class="p">(</span><span class="n">jeffGoldblum</span><span class="p">);</span></code></pre></figure>

<p>Clang will tell you something like “error: calling a private constructor of class ‘Hooman’”. Other compilers might tell you other things, but they’ll generally have the same annoyed tone. Now would be a good time to apologize to your compiler for all the silly things you’ve done in the past.</p>

<h2 id="digression-on-macros">Digression on macros</h2>
<p>My C++ motto is “Yes, but just don’t”. Yes, macros are weird and evil and if you use them incorrectly you will open the hellmouth. So try not to. We will use macros in a civilized way in here, and if you’re writing something like <code class="language-plaintext highlighter-rouge">#define TRUE FALSE</code> we will all agree that it was an uncivilized thing to do and it’s your turn to tell Buffy about the hellmouth.</p>

<h2 id="debug-checks">Debug checks</h2>
<p>The Chromium code is peppered with these things we call <a href="https://code.google.com/p/chromium/codesearch#chromium/src/base/logging.h&amp;l=734">DCHECKs</a>. They’re asserts that run only in debug builds, so that you will catch bad scenarios in development and testing but you won’t give the user a panic attack in production. Ideally, we all have 100% test coverage that we run in debug mode (because it’s obviously sooper fast), so we detect all of the herp derps and nothing ever goes wrong in production. Ideally.</p>

<p>My favourite usage of dchecks is to make sure that I’m not accidentally breaking code by adding new values to an enum, and have them be unintentionally handled by catch-all blocks.</p>

<p>Let’s pretend we have this enum:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">enum</span> <span class="n">THINGS_TO_WEAR</span> <span class="p">{</span>
  <span class="n">SOCKS</span><span class="p">,</span>
  <span class="n">HAT</span>
<span class="p">};</span></code></pre></figure>

<p>Which we would use for dressing up in the morning like so:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">if</span> <span class="p">(</span><span class="n">thing</span> <span class="o">==</span> <span class="n">SOCKS</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Put on feet.</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">DCHECK</span><span class="p">(</span><span class="n">thing</span> <span class="o">==</span> <span class="n">HAT</span><span class="p">);</span>  <span class="c1">// &lt;-- The important bit.</span>
  <span class="c1">// Put on head.</span>
<span class="p">}</span></code></pre></figure>

<p>This way, if later on someone adds <code class="language-plaintext highlighter-rouge">PANTS</code> to <code class="language-plaintext highlighter-rouge">THINGS_TO_WEAR</code> and ends up calling this code with <code class="language-plaintext highlighter-rouge">thing = PANTS</code>, the runtime will meep and I won’t have accidentally put my pants on my head. See what I did there? (If you were bothered that the enum wasn’t sorted alphabetically, now you know why. Let’s move on.)</p>

<p>You can also do this with a similar <a href="https://code.google.com/p/chromium/codesearch#chromium/src/base/logging.h&amp;l=783">NOTREACHED()</a> assert, to make sure your new values are not caught by a default switch case.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">switch</span> <span class="p">(</span><span class="n">thing</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">SOCKS</span><span class="p">:</span>
    <span class="c1">// Put on feet.</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="n">HAT</span><span class="p">:</span>
    <span class="c1">// Put on head.</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="nl">default:</span>
    <span class="n">NOTREACHED</span><span class="p">();</span>  <span class="c1">// MEEP.</span>
    <span class="k">break</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="unnamed-namespaces">Unnamed namespaces</h2>
<p>This is an unnamed namespace, which I am declaring in a <code class="language-plaintext highlighter-rouge">.cc</code> file, and it is the coolest:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">namespace</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="n">MyAmazingHelperFunction</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Reasons why it’s the coolest are:</p>

<ul>
  <li>This function is available only inside this <code class="language-plaintext highlighter-rouge">.cc</code> file so it doesn’t make your class obese.</li>
  <li>You don’t have to remember which of the 3+ meanings of <code class="language-plaintext highlighter-rouge">static</code> you’re referring to when defining a file scoped static variable. This means you’re playing by the “Yes, but don’t” rules of having fun with C++, which don’t give you headaches.</li>
  <li>If you care about this sort of thing, your function name gets a nicer mangled name.</li>
</ul>

<p>It’s basically just that second bullet though.</p>

<h2 id="forward-declarations--includes">Forward declarations &gt;&gt; #includes</h2>
<p>This is probaby the most boring of all the topics, but the most useful one. Having a header file include everything but the kitchen sink is a little unfortunate. Your compiler is unhappy because it needs to open all those files, which in turn will make you unhappy, because every time you touch a header file, it will trigger seventy billion other files to feel like they need to be recompiled. Ain’t nobody got time for that.</p>

<p>Instead, what we can do is forward declare the class (<code class="language-plaintext highlighter-rouge">class Foo;</code>) in the <code class="language-plaintext highlighter-rouge">.h</code> file, and include it (<code class="language-plaintext highlighter-rouge">#include "Foo.h";</code>) in the <code class="language-plaintext highlighter-rouge">.cc</code> file. That basically means you’re promising the compiler this type exists, and that you will tell it what the type looks like when it (the compiler) needs it. If the compiler needs to use the type and you haven’t included it, I promise you it will meep.</p>

<p>But because this is C++, the rules of this game are a little tricky, and will sometimes get you into an argument with the compiler. The question I try to answer is “Does the compiler need to know the size or contents of the class <code class="language-plaintext highlighter-rouge">Foo</code>?”</p>

<ul>
  <li>If the answer is yes, and the compiler cares (e.g. inheriting from/making a member of that incomplete type), then you won’t be able to forward declare it. You have to do the promising and the explaining in the same place, so might as well just include the file.</li>
  <li>If the answer is no, and the compiler doesn’t care (e.g. you’re declaring but not defining functions that use the incomplete type), then forward declare it away!</li>
</ul>

<p>This means you have to be a little careful when including the type in the <code class="language-plaintext highlighter-rouge">.cc</code> file. If there are two types that are called the exact same thing and you include the wrong header, you’ll have a bad time. So, you know, just don’t. :)</p>

<h2 id="thats-it-thats-all">That’s it, that’s all.</h2>
<p>Go forth and write nicer C++ code.</p>
:ET