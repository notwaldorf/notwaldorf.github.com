I"³<style>
.highlight .err {
  color: inherit;
  background-color: inherit;
}
.highlight .s1, .highlight .s {
  color: #336699;
  background: inherit;
}
pre {
  margin-bottom: 30px;
}
pre, code {
  background: #f4f6f8;
}
p > code, li > code {
  font-weight: bold;
}
pre {
  border-bottom: solid 1px #CFD8DC;
}
</style>

<p>This is a cheat sheet for the <a href="https://www.polymer-project.org/">Polymer 2.x</a> library.
If youâ€™re looking for the Polymer 1.x cheat sheet, it is <a href="../polymer-cheatsheet/">here</a>. If you think something
is missing from this page, <a href="https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Fmeowni.ca%2F&amp;ref_src=twsrc%5Etfw&amp;text=@notwaldorf%20Polymer%202%20cheat%20sheet%20feature%20request:">tell me</a> about it!</p>

<ul id="markdown-toc">
  <li><a href="#defining-an-element" id="markdown-toc-defining-an-element">Defining an element</a></li>
  <li><a href="#extending-an-element" id="markdown-toc-extending-an-element">Extending an element</a></li>
  <li><a href="#defining-a-mixin" id="markdown-toc-defining-a-mixin">Defining a mixin</a></li>
  <li><a href="#lifecycle-methods" id="markdown-toc-lifecycle-methods">Lifecycle methods</a></li>
  <li><a href="#data-binding" id="markdown-toc-data-binding">Data binding</a></li>
  <li><a href="#observers" id="markdown-toc-observers">Observers</a></li>
  <li><a href="#listeners" id="markdown-toc-listeners">Listeners</a></li>
  <li><a href="#properties-block" id="markdown-toc-properties-block">Properties block</a></li>
  <li><a href="#observing-added-and-removed-children" id="markdown-toc-observing-added-and-removed-children">Observing added and removed children</a></li>
  <li><a href="#style-modules" id="markdown-toc-style-modules">Style modules</a></li>
  <li><a href="#styling-with-custom-properties-and-mixins" id="markdown-toc-styling-with-custom-properties-and-mixins">Styling with custom properties and mixins</a></li>
  <li><a href="#binding-helper-elements" id="markdown-toc-binding-helper-elements">Binding helper elements</a></li>
</ul>

<h2 id="defining-an-element">Defining an element</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/upgrade">1.x -&gt; 2.x upgrade guide</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/registering-elements">registering an element</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom#style-modules">shared style modules</a>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"bower_components/polymer/polymer-element.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="c">&lt;!-- Use one of these style declarations, but not both --&gt;</span>
    <span class="c">&lt;!-- Use this if you donâ€™t want to include a shared style --&gt;</span>
    <span class="nt">&lt;style&gt;&lt;/style&gt;</span>
    <span class="c">&lt;!-- Use this if you want to include a shared style --&gt;</span>
    <span class="nt">&lt;style </span><span class="na">include=</span><span class="s">"some-style-module-name"</span><span class="nt">&gt;&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">is</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span><span class="p">;</span> <span class="p">}</span>
      <span class="c1">// All of these are optional. Only keep the ones you need.</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">properties</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">observers</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Associate the new class with an element name</span>
    <span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">MyElement</span><span class="p">.</span><span class="nx">is</span><span class="p">,</span> <span class="nx">MyElement</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>To get the class definition for a particular custom tag, you can use
<code class="language-plaintext highlighter-rouge">customElements.get('element-name')</code>.</p>

<h2 id="extending-an-element">Extending an element</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/custom-elements#extending-other-elements">extending elements</a>, <a href="https://www.polymer-project.org/2.0/docs/devguide/dom-template#inherited-templates">inherited templates</a>.</p>

<p>Instead of <code class="language-plaintext highlighter-rouge">Polymer.Element</code>, a custom element can extend a different element):</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ParentElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
  <span class="cm">/* ... */</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="nx">ChildElement</span> <span class="kd">extends</span> <span class="nx">ParentElement</span> <span class="p">{</span>
  <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To change or add to the parentâ€™s template, override the <code class="language-plaintext highlighter-rouge">template</code> getter:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"child-element"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;style&gt;</span> <span class="c">/* ... */</span> <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;span&gt;</span>bonus!<span class="nt">&lt;/span&gt;</span>
   <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">childTemplate</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">childTemplate</span> <span class="o">=</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">DomModule</span><span class="p">.</span><span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">child-element</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">template</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">parentTemplate</span> <span class="o">=</span> <span class="nx">ParentElement</span><span class="p">.</span><span class="nx">template</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="c1">// Or however you want to assemble these.</span>
    <span class="nx">childTemplate</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">parentTemplate</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">,</span> <span class="nx">parentTemplate</span><span class="p">);</span>

    <span class="kd">class</span> <span class="nx">ChildElement</span> <span class="kd">extends</span> <span class="nx">ParentElement</span> <span class="p">{</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">is</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">child-element</span><span class="dl">'</span><span class="p">;</span> <span class="p">}</span>
      <span class="c1">// Note: the more work you do here, the slower your element is to</span>
      <span class="c1">// boot up. You should probably do the template assembling once, in a</span>
      <span class="c1">// static method outside your class (like above).</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">template</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">childTemplate</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">ChildElement</span><span class="p">.</span><span class="nx">is</span><span class="p">,</span> <span class="nx">ChildElement</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>If you donâ€™t know the parent class, you can also use:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ChildElement</span> <span class="kd">extends</span> <span class="nx">customElements</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">parent-element</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* ... */</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="defining-a-mixin">Defining a mixin</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/custom-elements#mixins">mixins</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/hybrid-elements">hybrid elements</a>.</p>

<p>Defining a class expression mixin to share implementation between different elements:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="nx">MyMixin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">superClass</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">superClass</span> <span class="p">{</span>
      <span class="c1">// Code that you want common to elements.</span>
      <span class="c1">// If you're going to override a lifecycle method, remember that a) you</span>
      <span class="c1">// might need to call super but b) it might not exist</span>
      <span class="nx">connectedCallback</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">super</span><span class="p">.</span><span class="nx">connectedCallback</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">super</span><span class="p">.</span><span class="nx">connectedCallback</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="cm">/* ... */</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Using the mixin in an element definition:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span><span class="c">&lt;!-- ... --&gt;</span><span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="c1">// This could also be a sequence:</span>
    <span class="c1">//class MyElement extends AnotherMixin(MyMixin(Polymer.Element)) { â€¦ }</span>
    <span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">MyMixin</span><span class="p">(</span><span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">static</span> <span class="kd">get</span> <span class="nx">is</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span> <span class="p">}</span>
      <span class="cm">/* ... */</span>
    <span class="p">}</span>
    <span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">MyElement</span><span class="p">.</span><span class="nx">is</span><span class="p">,</span> <span class="nx">MyElement</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>Using hybrid behaviors (defined in the 1.x syntax) as mixins:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span><span class="c">&lt;!-- ... --&gt;</span><span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">mixinBehaviors</span><span class="p">([</span><span class="nx">MyBehavior</span><span class="p">,</span> <span class="nx">MyBehavior2</span><span class="p">],</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span><span class="p">)</span> <span class="p">{</span>
     <span class="kd">static</span> <span class="kd">get</span> <span class="nx">is</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span> <span class="p">}</span>
     <span class="cm">/* ... */</span>
    <span class="p">}</span>
    <span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span><span class="p">,</span> <span class="nx">MyElement</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<h2 id="lifecycle-methods">Lifecycle methods</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/custom-elements#element-lifecycle">lifecycle callbacks</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/custom-elements#one-time-initialization">ready</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
 <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">();</span> <span class="cm">/* ... */</span><span class="p">}</span>
 <span class="nx">ready</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">.</span><span class="nx">ready</span><span class="p">();</span> <span class="cm">/* ... */</span><span class="p">}</span>
 <span class="nx">connectedCallback</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">.</span><span class="nx">connectedCallback</span><span class="p">();</span> <span class="cm">/* ... */</span><span class="p">}</span>
 <span class="nx">disconnectedCallback</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">.</span><span class="nx">disconnectedCallback</span><span class="p">();</span> <span class="cm">/* ... */</span><span class="p">}</span>
 <span class="nx">attributeChangedCallback</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">.</span><span class="nx">attributeChangedCallback</span><span class="p">();</span> <span class="cm">/* ... */</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="data-binding">Data binding</h2>
<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/data-binding">data binding</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/data-binding#attribute-binding">attribute binding</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/data-binding#bind-array-item">binding to array items</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/data-binding#annotated-computed">computed bindings</a>.</p>

<p>Donâ€™t forget: Polymer <a href="https://www.polymer-project.org/2.0/docs/devguide/properties#property-name-mapping">camel-cases</a> properties, so if in JavaScript you use <code class="language-plaintext highlighter-rouge">myProperty</code>,
in HTML you would use <code class="language-plaintext highlighter-rouge">my-property</code>.</p>

<p><strong>One way</strong> binding: when <code class="language-plaintext highlighter-rouge">myProperty</code> changes, <code class="language-plaintext highlighter-rouge">theirProperty</code> gets updated:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">their-property=</span><span class="s">"[[myProperty]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Two way</strong> binding: when <code class="language-plaintext highlighter-rouge">myProperty</code> changes, <code class="language-plaintext highlighter-rouge">theirProperty</code> gets updated,
and vice versa:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">their-property=</span><span class="s">"{{myProperty}}"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Attribute binding</strong>: when <code class="language-plaintext highlighter-rouge">myProperty</code> is <code class="language-plaintext highlighter-rouge">true</code>, the element is hidden; when itâ€™s
<code class="language-plaintext highlighter-rouge">false</code>, the element is visible. The difference between attribute and property
binding is that property binding is equivalent to <code class="language-plaintext highlighter-rouge">someElement.someProp = value</code>,
whereas attribute binding is equivalent to: <code class="language-plaintext highlighter-rouge">someElement.setAttribute(someProp, value)</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">hidden</span><span class="err">$="[[</span><span class="na">myProperty</span><span class="err">]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Computed binding</strong>: binding to the <code class="language-plaintext highlighter-rouge">class</code> attribute will recompile styles when
<code class="language-plaintext highlighter-rouge">myProperty</code> changes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">class</span><span class="err">$="[[</span><span class="na">_computeSomething</span><span class="err">(</span><span class="na">myProperty</span><span class="err">)]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
<span class="nt">&lt;script&gt;</span>
<span class="nx">_computeSomething</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">prop</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">a-class-name</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">another-class-name</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="observers">Observers</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/observers">observers</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/observers#multi-property-observers">multi-property observers</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/observers#array-observation">observing array mutations</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/observers#dynamic-observers">adding observers dynamically</a>.</p>

<p>Adding an <code class="language-plaintext highlighter-rouge">observer</code> in the <code class="language-plaintext highlighter-rouge">properties</code> block lets you observe changes in the
value of a property:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">get</span> <span class="nx">properties</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">myProperty</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">observer</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_myPropertyChanged</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// The second argument is optional, and gives you the</span>
<span class="c1">// previous value of the property, before the update:</span>
<span class="nx">_myPropertyChanged</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="cm">/*oldValue */</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">observers</code> block:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">get</span> <span class="nx">observers</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="dl">'</span><span class="s1">_doSomething(myProperty)</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">_multiPropertyObserver(myProperty, anotherProperty)</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">_observerForASubProperty(user.name)</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// Below, items can be an array or an object:'</span>
    <span class="dl">'</span><span class="s1">_observerForABunchOfSubPaths(items.*)</span><span class="dl">'</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Adding an observer dynamically for a property <code class="language-plaintext highlighter-rouge">otherProperty</code>:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Define a method</span>
<span class="nx">_otherPropertyChanged</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="c1">// Call it when `otherPropety` changes</span>
<span class="k">this</span><span class="p">.</span><span class="nx">_createPropertyObserver</span><span class="p">(</span><span class="dl">'</span><span class="s1">otherProperty</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">_otherPropertyChanged</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="listeners">Listeners</h2>
<p>In Polymer 2.0, we recommend that rather than using the <code class="language-plaintext highlighter-rouge">listeners</code> block,
you #useThePlatform and define event listeners yourself:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ready</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">super</span><span class="p">.</span><span class="nx">ready</span><span class="p">();</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">some-event</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">someFunction</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There is a <a href="https://github.com/Polymer/polymer/pull/4632">PR</a> out to add a
declarative listener block as a mixin. Stay tuned!</p>

<h2 id="properties-block">Properties block</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/properties">declared properties</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/properties#configuring-object-and-array-properties">object/array properties</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/properties#read-only">read-only properties</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/observers#computed-properties">computed properties</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/observers#add-a-computed-property-dynamically">adding computed properties dynamically</a>.</p>

<p>There are all the possible things you can use in the <code class="language-plaintext highlighter-rouge">properties</code>
block. Donâ€™t just use all of them because you can; some (like <code class="language-plaintext highlighter-rouge">reflectToAttribute</code>
  and <code class="language-plaintext highlighter-rouge">notify</code>) can have performance implications.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">get</span> <span class="nx">properties</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">basic</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">|</span> <span class="nb">Number</span> <span class="o">|</span> <span class="nb">String</span> <span class="o">|</span> <span class="nb">Array</span> <span class="o">|</span> <span class="nb">Object</span><span class="p">,</span>

      <span class="c1">// Default value of the property can be one of the types above, eg:</span>
      <span class="na">value</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>

      <span class="c1">// For an Array or Object, you must return it from a function</span>
      <span class="c1">// (otherwise the array will be defined on the prototype</span>
      <span class="c1">// and not the instance):</span>
      <span class="na">value</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="dl">'</span><span class="s1">cheese</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pepperoni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">more-cheese</span><span class="dl">'</span><span class="p">]</span> <span class="p">},</span>

      <span class="na">reflectToAttribute</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">readOnly</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span><span class="p">,</span>
      <span class="na">notify</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span>
    <span class="p">},</span>

    <span class="c1">// Computed properties are essentially read-only, and can only be</span>
    <span class="c1">// updated when their dependencies change.</span>
    <span class="na">basicComputedProperty</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">computed</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_someFunction(myProperty, anotherProperty)</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Adding a computed property dynamically:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">_createComputedProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">newProperty</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">_computeNewProperty(prop1,prop2)</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="observing-added-and-removed-children">Observing added and removed children</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/shadow-dom#shadow-dom-and-composition">Shadow DOM distribution</a>,
<a href="https://www.polymer-project.org/2.0/docs/upgrade#polymer-dom-apis">observe nodes</a>.</p>

<p>If you have a content node for distribution:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;slot&gt;&lt;/slot&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>
<p>And you want to be notified when nodes have been added/removed:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- You need to import the observer --&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"/bower_components/polymer/lib/utils/flattened-nodes-observer.html"</span><span class="nt">&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
  <span class="cm">/* ... */</span>
  <span class="nl">connectedCallback</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nx">connectedCallback</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">FlattenedNodesObserver</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// info is {addedNodes: [...], removedNodes: [...]}</span>
    <span class="p">});</span>
  <span class="p">}</span>
  <span class="nl">disconnectedCallback</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nx">disconnectedCallback</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="style-modules">Style modules</h2>
<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom#style-modules">shared style modules</a>.</p>

<p>Defining styles that will be shared across different elements, in a file called
<code class="language-plaintext highlighter-rouge">my-shared-styles.html</code> (for example):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nc">.red</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span> <span class="p">}</span>
      <span class="c">/* Custom property defined in the global scope */</span>
      <span class="nt">html</span> <span class="p">{</span>
        <span class="py">--the-best-red</span><span class="p">:</span> <span class="m">#e91e63</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>Include the shared style in a custom element:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"my-shared-styles.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;style </span><span class="na">include=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
      <span class="c">/* Other styles in here */</span>
    <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">class</span> <span class="nx">MyElement</span> <span class="kd">extends</span> <span class="nx">Polymer</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
      <span class="cm">/* ... */</span>
    <span class="p">}</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>Include the shared style in the main document:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="c">&lt;!-- Import the custom-style element --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"components/polymer/lib/elements/custom-style.html"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"my-shared-styles.html"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;custom-style&gt;</span>
    <span class="nt">&lt;style </span><span class="na">include=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
      <span class="c">/* Other styles in here */</span>
    <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;/custom-style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>...<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="styling-with-custom-properties-and-mixins">Styling with custom properties and mixins</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/style-shadow-dom">styling</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties">CSS properties</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties#use-custom-css-mixins">CSS mixins</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/custom-css-properties#custom-properties-shim-limitations">shim limitations</a></p>

<p>Note that the examples below depend on browser support for custom properties and mixins.</p>

<p>Defining a custom property:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">html</span> <span class="c">/* or :host etc. */</span><span class="p">{</span>
  <span class="py">--my-custom-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property with a fallback:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">,</span> <span class="m">3px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property with a custom property fallback:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">,</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-fallback</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you want to use mixins, you need to include the CSS mixins shim.
For how to use the shim and its limitations, check the docs linked at the
beginning of the section.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"/bower_components/shadycss/apply-shim.html"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Defining a mixin:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">some-custom-element</span> <span class="p">{</span>
  <span class="py">--my-custom-mixin</span><span class="p">:</span> <span class="err">{</span>
    <span class="n">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="p">}</span><span class="o">;</span>
<span class="err">}</span>
</code></pre></div></div>

<p>Using a mixin:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="err">@apply</span> <span class="err">--my-custom-mixin;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="binding-helper-elements">Binding helper elements</h2>

<p>Docs: <a href="https://www.polymer-project.org/2.0/docs/devguide/templates#dom-repeat">dom-repeat</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/templates#dom-bind">dom-bind</a>,
<a href="https://www.polymer-project.org/2.0/docs/devguide/templates#dom-if">dom-if</a></p>

<p>There are two ways to use the helper elements:</p>
<ul>
  <li>inside a Polymer element/Polymer managed template: just use the <code class="language-plaintext highlighter-rouge">&lt;template is=...&gt;</code>
syntax, without the wrapper, for example:</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template</span> <span class="na">is=</span><span class="s">"dom-repeat"</span><span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>
<ul>
  <li>outside of a Polymer managed template: use the <code class="language-plaintext highlighter-rouge">&lt;dom-...&gt;</code> wrapper element
around a <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code>, for example:</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-repeat&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    ...
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/dom-repeat&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dom-repeat</code> stamps and binds a template for each item in an array:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"components/polymer/lib/elements/dom-repeat.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dom-repeat</span> <span class="na">items=</span><span class="s">"[[employees]]"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div&gt;</span>First name: <span class="nt">&lt;span&gt;</span>[[item.first]]<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div&gt;</span>Last name: <span class="nt">&lt;span&gt;</span>[[item.last]]<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/dom-repeat&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dom-bind</code> stamps itself into the main document and adds a binding scope:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"components/polymer/lib/elements/dom-bind.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;dom-bind&gt;</span>
    <span class="nt">&lt;template&gt;</span>
      <span class="nt">&lt;paper-input</span> <span class="na">value=</span><span class="s">"{{myText}}"</span><span class="nt">&gt;&lt;/paper-input&gt;</span>
      <span class="nt">&lt;span&gt;</span>You typed: [[myText]]<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;/dom-bind&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;html&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dom-if</code> stamps itself conditionally based on a propertyâ€™s value:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"components/polymer/lib/elements/dom-if.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dom-if</span> <span class="na">if=</span><span class="s">"[[myProperty]]"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;span&gt;</span>This content will appear when myProperty is truthy.<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/dom-if&gt;</span>  
</code></pre></div></div>
:ET