I"ˆt<style>
.highlight .err {
  color: inherit;
  background-color: inherit;
}
.highlight .s1, .highlight .s {
  color: #336699;
  background: inherit;
}
pre {
  margin-bottom: 30px;
}
pre, code {
  background: #f4f6f8;
}
p > code, li > code {
  font-weight: bold;
}
pre {
  border-bottom: solid 1px #CFD8DC;
}
</style>

<p>This is a cheat sheet for the <a href="https://www.polymer-project.org/1.0/">Polymer 1.x</a> library.
It helps you write Web Components, which are pretty ðŸ”¥ðŸ”¥ðŸ”¥. If youâ€™re interested in the
Polymer 2.0 cheat sheet, itâ€™s <a href="https://meowni.ca/posts/polymer-2-cheatsheet/">here</a>. If you think something
is missing from this page, <a href="https://twitter.com/intent/tweet?original_referer=https%3A%2F%2Fmeowni.ca%2F&amp;ref_src=twsrc%5Etfw&amp;text=@notwaldorf%20Polymer%20cheat%20sheet%20feature%20request:">tell me</a> about it!</p>

<ul id="markdown-toc">
  <li><a href="#defining-an-element" id="markdown-toc-defining-an-element">Defining an element</a></li>
  <li><a href="#defining-a-behaviour" id="markdown-toc-defining-a-behaviour">Defining a behaviour</a></li>
  <li><a href="#lifecycle-methods" id="markdown-toc-lifecycle-methods">Lifecycle methods</a></li>
  <li><a href="#data-binding" id="markdown-toc-data-binding">Data binding</a></li>
  <li><a href="#observers" id="markdown-toc-observers">Observers</a></li>
  <li><a href="#listeners" id="markdown-toc-listeners">Listeners</a></li>
  <li><a href="#properties-block" id="markdown-toc-properties-block">Properties block</a></li>
  <li><a href="#observing-added-and-removed-children" id="markdown-toc-observing-added-and-removed-children">Observing added and removed children</a></li>
  <li><a href="#style-modules" id="markdown-toc-style-modules">Style modules</a></li>
  <li><a href="#styling-with-custom-properties-and-mixins" id="markdown-toc-styling-with-custom-properties-and-mixins">Styling with custom properties and mixins</a></li>
  <li><a href="#binding-helper-elements" id="markdown-toc-binding-helper-elements">Binding helper elements</a></li>
</ul>

<h2 id="defining-an-element">Defining an element</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/registering-elements">registering an element</a>, <a href="https://www.polymer-project.org/1.0/docs/devguide/registering-elements#prototype-mixins">behaviours</a>, <a href="https://www.polymer-project.org/1.0/docs/devguide/styling#style-modules">shared style modules</a></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="c">&lt;!-- Use one of these style declarations, but not both --&gt;</span>
    <span class="c">&lt;!-- Use this if you donâ€™t want to include a shared style --&gt;</span>
    <span class="nt">&lt;style&gt;&lt;/style&gt;</span>
    <span class="c">&lt;!-- Use this if you want to include a shared style --&gt;</span>
    <span class="nt">&lt;style </span><span class="na">include=</span><span class="s">"some-style-module-name"</span><span class="nt">&gt;&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">Polymer</span><span class="p">({</span>
      <span class="na">is</span><span class="p">:</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span><span class="p">,</span>
      <span class="c1">// All of these are optional. Only keep the ones you need.</span>
      <span class="na">behaviors</span><span class="p">:</span> <span class="p">[],</span>
      <span class="na">observers</span><span class="p">:</span> <span class="p">[],</span>
      <span class="na">listeners</span><span class="p">:</span> <span class="p">{},</span>
      <span class="na">hostAttributes</span><span class="p">:</span> <span class="p">{},</span>
      <span class="na">properties</span><span class="p">:</span> <span class="p">{}</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<h2 id="defining-a-behaviour">Defining a behaviour</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/behaviors">behaviours</a>.</p>

<p>Defining a behavior to share implementation between different elements:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="nx">MyNamespace</span><span class="p">.</span><span class="nx">MyFancyBehaviorImpl</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// Code that you want common to elements, such</span>
    <span class="c1">// as behaviours, methods, etc.</span>
  <span class="p">}</span>

  <span class="nx">MyNamespace</span><span class="p">.</span><span class="nx">MyFancyBehavior</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">MyFancyBehaviorImpl</span><span class="p">,</span>
    <span class="cm">/* You can add other behaviours here */</span>
  <span class="p">];</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Using the behavior in an element:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">Polymer</span><span class="p">({</span>
      <span class="na">is</span><span class="p">:</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">behaviors</span><span class="p">:</span> <span class="p">[</span><span class="nx">MyNamespace</span><span class="p">.</span><span class="nx">MyCustomButtonBehavior</span><span class="p">]</span>
      <span class="cm">/* ... */</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<h2 id="lifecycle-methods">Lifecycle methods</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/registering-elements#lifecycle-callbacks">lifecycle callbacks</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Polymer</span><span class="p">({</span>
  <span class="na">registered</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">created</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">ready</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">attached</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">detached</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Thereâ€™s an <code class="language-plaintext highlighter-rouge">attributeChanged</code> callback as well, but thatâ€™s very rarely used.</p>

<h2 id="data-binding">Data binding</h2>
<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/data-binding">data binding</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/data-binding#attribute-binding">attribute binding</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/data-binding#bind-array-item">binding to array items</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/data-binding#annotated-computed">computed bindings</a>.</p>

<p>Donâ€™t forget: Polymer <a href="https://www.polymer-project.org/1.0/docs/devguide/properties#property-name-mapping">camel-cases</a> properties, so if in JavaScript you use <code class="language-plaintext highlighter-rouge">myProperty</code>,
in HTML you would use <code class="language-plaintext highlighter-rouge">my-property</code>.</p>

<p><strong>One way</strong> binding: when <code class="language-plaintext highlighter-rouge">myProperty</code> changes, <code class="language-plaintext highlighter-rouge">theirProperty</code> gets updated:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">their-property=</span><span class="s">"[[myProperty]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Two way</strong> binding: when <code class="language-plaintext highlighter-rouge">myProperty</code> changes, <code class="language-plaintext highlighter-rouge">theirProperty</code> gets updated,
and vice versa:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">their-property=</span><span class="s">"{{myProperty}}"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Attribute binding</strong>: when <code class="language-plaintext highlighter-rouge">myProperty</code> is <code class="language-plaintext highlighter-rouge">true</code>, the element is hidden; when itâ€™s
<code class="language-plaintext highlighter-rouge">false</code>, the element is visible:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">hidden</span><span class="err">$="[[</span><span class="na">myProperty</span><span class="err">]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>
</code></pre></div></div>

<p><strong>Computed binding</strong>: binding to the <code class="language-plaintext highlighter-rouge">class</code> attribute will recompile styles when
<code class="language-plaintext highlighter-rouge">myProperty</code> changes:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;some-element</span> <span class="na">class</span><span class="err">$="[[</span><span class="na">_computeSomething</span><span class="err">(</span><span class="na">myProperty</span><span class="err">)]]"</span><span class="nt">&gt;&lt;/some-element&gt;</span>

_computeSomething: function(prop) {
  return prop ? 'a-class-name' : 'another-class-name';
}
</code></pre></div></div>

<h2 id="observers">Observers</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/observers">observers</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/observers#multi-property-observers">multi-property observers</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/observers#array-observation">observing array mutations</a>.</p>

<p>Adding an <code class="language-plaintext highlighter-rouge">observer</code> in the <code class="language-plaintext highlighter-rouge">properties</code> block lets you observe changes in the
value of a property:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">properties</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">myProperty</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">observer</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_myPropertyChanged</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">},</span>

<span class="c1">// The second argument is optional, and gives you the</span>
<span class="c1">// previous value of the property, before the update:</span>
<span class="nx">_myPropertyChanged</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="cm">/*oldValue */</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">observers</code> block:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">observers</span><span class="p">:</span> <span class="p">[</span>
  <span class="dl">'</span><span class="s1">_doSomething(myProperty)</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">_multiPropertyObserver(myProperty, anotherProperty)</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">_observerForASubProperty(user.name)</span><span class="dl">'</span><span class="p">,</span>
  <span class="c1">// Below, items can be an array or an object:'</span>
  <span class="dl">'</span><span class="s1">_observerForABunchOfSubPaths(items.*)</span><span class="dl">'</span>
<span class="p">]</span>
</code></pre></div></div>

<h2 id="listeners">Listeners</h2>
<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/events#event-listeners">event listeners</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/events#imperative-listeners">imperative listeners</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">listeners</span><span class="p">:</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_onClick</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">input</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_onInput</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">something-changed</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_onSomethingChanged</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="properties-block">Properties block</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/properties">declared properties</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/properties#configuring-object-and-array-properties">object/array properties</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/properties#read-only">read-only properties</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/observers#define-a-computed-property">computed properties</a>.</p>

<p>There are all the possible things you can use in the <code class="language-plaintext highlighter-rouge">properties</code>
block. Donâ€™t just use all of them because you can; some (like <code class="language-plaintext highlighter-rouge">reflectToAttribute</code>
  and <code class="language-plaintext highlighter-rouge">notify</code>) can have performance implications.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">properties</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">basic</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span> <span class="o">|</span> <span class="nb">Number</span> <span class="o">|</span> <span class="nb">String</span> <span class="o">|</span> <span class="nb">Array</span> <span class="o">|</span> <span class="nb">Object</span><span class="p">,</span>

    <span class="c1">// Value can be one of the types above, eg:</span>
    <span class="na">value</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>

    <span class="c1">// For an Array or Object, you must return it from a function</span>
    <span class="c1">// (otherwise the array will be defined on the prototype</span>
    <span class="c1">// and not the instance):</span>
    <span class="na">value</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="dl">'</span><span class="s1">cheese</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pepperoni</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">more-cheese</span><span class="dl">'</span><span class="p">]</span> <span class="p">},</span>

    <span class="na">reflectToAttribute</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">readOnly</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">notify</span><span class="p">:</span> <span class="kc">true</span> <span class="o">|</span> <span class="kc">false</span>
  <span class="p">},</span>

  <span class="c1">// Computed properties are essentially read-only, and can only be</span>
  <span class="c1">// updated when their dependencies change.</span>
  <span class="nx">basicComputedProperty</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">computed</span><span class="p">:</span> <span class="dl">'</span><span class="s1">_someFunction(myProperty, anotherProperty)</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="observing-added-and-removed-children">Observing added and removed children</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/local-dom#dom-distribution">DOM distribution</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/local-dom#observe-nodes">observe nodes</a>.</p>

<p>If you have a content node for distribution:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;slot</span> <span class="na">id=</span><span class="s">"distributed"</span><span class="nt">&gt;&lt;/slot&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>
<p>And you want to be notified when nodes have been added/removed:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">attached</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">_observer</span> <span class="o">=</span>
    <span class="nx">Polymer</span><span class="p">.</span><span class="nx">dom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">distributed</span><span class="p">).</span><span class="nx">observeNodes</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// info is {addedNodes: [...], removedNodes: [...]}</span>
  <span class="p">});</span>
<span class="p">},</span>
<span class="nx">detached</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">Polymer</span><span class="p">.</span><span class="nx">dom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">distributed</span><span class="p">).</span><span class="nx">unobserveNodes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_observer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="style-modules">Style modules</h2>
<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/styling#style-modules">shared style modules</a>.</p>

<p>Defining styles that will be shared across different elements, in a file called
<code class="language-plaintext highlighter-rouge">my-shared-styles.html</code> (for example):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nc">.red</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span> <span class="p">}</span>
      <span class="c">/* Custom property defined in the global scope */</span>
      <span class="nt">html</span> <span class="p">{</span>
        <span class="py">--the-best-red</span><span class="p">:</span> <span class="m">#e91e63</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>Include the shared style in a custom element:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"my-shared-styles.html"</span><span class="nt">&gt;</span>
<span class="nt">&lt;dom-module</span> <span class="na">id=</span><span class="s">"element-name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;style </span><span class="na">include=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
      <span class="c">/* Other styles in here */</span>
    <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">Polymer</span><span class="p">({</span> <span class="na">is</span><span class="p">:</span> <span class="dl">'</span><span class="s1">element-name</span><span class="dl">'</span> <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/dom-module&gt;</span>
</code></pre></div></div>

<p>Include the shared style in the main document:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"import"</span> <span class="na">href=</span><span class="s">"my-shared-styles.html"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;style </span><span class="na">is=</span><span class="s">"custom-style"</span> <span class="na">include=</span><span class="s">"my-shared-styles"</span><span class="nt">&gt;</span>
    <span class="c">/* Other styles in here */</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>...<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="styling-with-custom-properties-and-mixins">Styling with custom properties and mixins</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/devguide/styling">styling</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-properties">CSS properties</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/styling#custom-css-mixins">CSS mixins</a>,
<a href="https://www.polymer-project.org/1.0/docs/devguide/styling#custom-properties-shim-limitations">shim limitations</a></p>

<p>Note that the examples below depend on browser support for custom properties.
For how to use the shim (spoilers: itâ€™s <code class="language-plaintext highlighter-rouge">&lt;style is="custom-style"&gt;</code>) and its limitations,
check the docs linked above.</p>

<p>Defining a custom property:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">html</span> <span class="c">/* or :host, or :root etc. */</span><span class="p">{</span>
  <span class="py">--my-custom-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property with a fallback:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">,</span> <span class="m">3px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a custom property with a custom property fallback:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-custom-radius</span><span class="p">,</span> <span class="n">var</span><span class="p">(</span><span class="n">--my-fallback</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Defining a mixin:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">some-custom-element</span> <span class="p">{</span>
  <span class="py">--my-custom-mixin</span><span class="p">:</span> <span class="err">{</span>
    <span class="n">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="p">}</span><span class="o">;</span>
<span class="err">}</span>
</code></pre></div></div>

<p>Using a mixin:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.my-image</span> <span class="p">{</span>
  <span class="err">@apply</span> <span class="err">--my-custom-mixin;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="binding-helper-elements">Binding helper elements</h2>

<p>Docs: <a href="https://www.polymer-project.org/1.0/docs/api/dom-repeat">dom-repeat</a>,
<a href="https://www.polymer-project.org/1.0/docs/api/dom-bind">dom-bind</a>,
<a href="https://www.polymer-project.org/1.0/docs/api/dom-if">dom-if</a></p>

<p><code class="language-plaintext highlighter-rouge">dom-repeat</code> stamps and binds a template for each item in an array:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template</span> <span class="na">is=</span><span class="s">"dom-repeat"</span> <span class="na">items=</span><span class="s">"{{employees}}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div&gt;</span>First name: <span class="nt">&lt;span&gt;</span>{{item.first}}<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>Last name: <span class="nt">&lt;span&gt;</span>{{item.last}}<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dom-bind</code> stamps itself into the main document and adds a binding scope:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;template</span> <span class="na">is=</span><span class="s">"dom-bind"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;paper-input</span> <span class="na">value=</span><span class="s">"{{myText}}"</span><span class="nt">&gt;&lt;/paper-input&gt;</span>
    <span class="nt">&lt;span&gt;</span>You typed: [[myText]]<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;html&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dom-if</code> stamps itself conditionally based on a propertyâ€™s value:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template</span> <span class="na">is=</span><span class="s">"dom-if"</span> <span class="na">if=</span><span class="s">"{{myProperty}}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span&gt;</span>This content will appear when myProperty is truthy.<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/template&gt;</span>  
</code></pre></div></div>
:ET